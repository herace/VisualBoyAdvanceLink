# Makefile.in generated by automake 1.7.9 from Makefile.am.
# src/sdl/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ../..

pkgdatadir = $(datadir)/VisualBoyAdvance
pkglibdir = $(libdir)/VisualBoyAdvance
pkgincludedir = $(includedir)/VisualBoyAdvance
top_builddir = ../..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_triplet = i686-pc-linux-gnu
ACLOCAL = ${SHELL} /home/jaime/eclipse-workspace/VisualBoyAdvance_Link_PROG/VisualBoyAdvance-1.8.0/missing --run aclocal-1.7
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/jaime/eclipse-workspace/VisualBoyAdvance_Link_PROG/VisualBoyAdvance-1.8.0/missing --run tar
AUTOCONF = ${SHELL} /home/jaime/eclipse-workspace/VisualBoyAdvance_Link_PROG/VisualBoyAdvance-1.8.0/missing --run autoconf
AUTOHEADER = ${SHELL} /home/jaime/eclipse-workspace/VisualBoyAdvance_Link_PROG/VisualBoyAdvance-1.8.0/missing --run autoheader
AUTOMAKE = ${SHELL} /home/jaime/eclipse-workspace/VisualBoyAdvance_Link_PROG/VisualBoyAdvance-1.8.0/missing --run automake-1.7
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS =  -I/usr/include/libpng12  
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2 -DBKPT_SUPPORT -DPROFILING -DMMX -DDEV_VERSION
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE=\"VisualBoyAdvance\" -DVERSION=\"1.8.0\" -DYYTEXT_POINTER=1 -DHAVE_LIBZ=1 -DHAVE_LIBPTHREAD=1 -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_MALLOC_H=1 -DHAVE_STRINGS_H=1 -DHAVE_UNISTD_H=1 -DHAVE_ARPA_INET_H=1 -DHAVE_NETINET_IN_H=1 
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
GETTEXT_PACKAGE = 
GMSGFMT = 
GTKMM_CFLAGS = 
GTKMM_CPPFLAGS = 
GTKMM_LIBS = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
INTLLIBS = 
LDFLAGS = 
LEX = flex
LEXLIB = -lfl
LEX_OUTPUT_ROOT = lex.yy
LIBICONV = 
LIBINTL = 
LIBOBJS = 
LIBPNG_CFLAGS = -I/usr/include/libpng12  
LIBPNG_LIBS = -lpng12  
LIBS = -lpthread -lz  -lpng12   -lrt
LTLIBICONV = 
LTLIBINTL = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/jaime/eclipse-workspace/VisualBoyAdvance_Link_PROG/VisualBoyAdvance-1.8.0/missing --run makeinfo
MKINSTALLDIRS = 
MSGFMT = 
MSGMERGE = 
NASM = /usr/bin/nasm
OBJEXT = o
PACKAGE = VisualBoyAdvance
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
POSUB = 
RANLIB = ranlib
SDL_CFLAGS = -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
SDL_CONFIG = /usr/bin/sdl-config
SDL_LIBS = -L/usr/lib/i386-linux-gnu -lSDL
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
USE_NLS = 
VBA_EXTRA = 
VBA_LIBS = ../gb/libgb.a ../prof/libprof.a ../i386/lib386.a
VBA_SRC_EXTRA =  prof i386 sdl
VERSION = 1.8.0
XGETTEXT = 
YACC = bison -y
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_RANLIB = ranlib
ac_ct_STRIP = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/jaime/eclipse-workspace/VisualBoyAdvance_Link_PROG/VisualBoyAdvance-1.8.0/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
oldincludedir = /usr/include
prefix = /opt/visualboyadvancelink/
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
bin_PROGRAMS = VisualBoyAdvance

noinst_PROGRAMS = TestEmu

VisualBoyAdvance_SOURCES = \
	SDL.cpp			\
	debugger.cpp		\
	debugger.h		\
	../2xSaI.cpp		\
	../AutoBuild.h		\
	../Cheats.cpp		\
	../Cheats.h		\
	../EEprom.cpp		\
	../EEprom.h		\
	../Flash.cpp		\
	../Flash.h		\
	../GBA.cpp		\
	../GBA.h		\
	../GBALink.cpp		\
	../GBALink.h		\
	../GBAinline.h		\
	../Gfx.cpp		\
	../Gfx.h		\
	../Globals.cpp		\
	../Globals.h		\
	../Mode0.cpp		\
	../Mode1.cpp		\
	../Mode2.cpp		\
	../Mode3.cpp		\
	../Mode4.cpp		\
	../Mode5.cpp		\
	../NLS.h		\
	../Port.h		\
	../RTC.cpp		\
	../RTC.h		\
	../Sound.cpp		\
	../Sound.h		\
	../Sram.cpp		\
	../Sram.h		\
	../System.h		\
	../Text.cpp		\
	../Text.h		\
	../Util.cpp		\
	../Util.h		\
	../admame.cpp		\
	../agbprint.cpp		\
	../agbprint.h		\
	../arm-new.h		\
	../armdis.cpp		\
	../armdis.h		\
	../bilinear.cpp		\
	../bios.cpp		\
	../bios.h		\
	../elf.cpp		\
	../elf.h		\
	../expr-lex.cpp		\
	../expr.cpp		\
	../expr.cpp.h		\
	../exprNode.cpp		\
	../exprNode.h		\
	../getopt.c		\
	../getopt.h		\
	../getopt1.c		\
	../hq2x.cpp		\
	../hq2x.h		\
	../interframe.cpp	\
	../interp.h		\
	../lq2x.h		\
	../memgzio.c		\
	../memgzio.h		\
	../motionblur.cpp	\
	../pixel.cpp		\
	../remote.cpp		\
	../scanline.cpp		\
	../simple2x.cpp		\
	../thumb.h		\
	../unzip.cpp		\
	../unzip.h


VisualBoyAdvance_LDADD = ../gb/libgb.a ../prof/libprof.a ../i386/lib386.a -L/usr/lib/i386-linux-gnu -lSDL 

VisualBoyAdvance_DEPENDENCIES = ../gb/libgb.a ../prof/libprof.a ../i386/lib386.a

TestEmu_SOURCES = \
	TestEmu.cpp		\
	debugger.cpp		\
	debugger.h		\
	../2xSaI.cpp		\
	../AutoBuild.h		\
	../Cheats.cpp		\
	../Cheats.h		\
	../EEprom.cpp		\
	../EEprom.h		\
	../Flash.cpp		\
	../Flash.h		\
	../GBA.cpp		\
	../GBA.h		\
	../GBALink.cpp		\
	../GBALink.h		\
	../GBAinline.h		\
	../Gfx.cpp		\
	../Gfx.h		\
	../Globals.cpp		\
	../Globals.h		\
	../Mode0.cpp		\
	../Mode1.cpp		\
	../Mode2.cpp		\
	../Mode3.cpp		\
	../Mode4.cpp		\
	../Mode5.cpp		\
	../NLS.h		\
	../Port.h		\
	../RTC.cpp		\
	../RTC.h		\
	../Sound.cpp		\
	../Sound.h		\
	../Sram.cpp		\
	../Sram.h		\
	../System.h		\
	../Text.cpp		\
	../Text.h		\
	../Util.cpp		\
	../Util.h		\
	../admame.cpp		\
	../agbprint.cpp		\
	../agbprint.h		\
	../arm-new.h		\
	../armdis.cpp		\
	../armdis.h		\
	../bios.cpp		\
	../bios.h		\
	../elf.cpp		\
	../elf.h		\
	../expr-lex.cpp		\
	../expr.cpp		\
	../expr.cpp.h		\
	../exprNode.cpp		\
	../exprNode.h		\
	../hq2x.cpp		\
	../hq2x.h		\
	../interp.h		\
	../lq2x.h		\
	../memgzio.c		\
	../memgzio.h		\
	../motionblur.cpp	\
	../pixel.cpp		\
	../remote.cpp		\
	../scanline.cpp		\
	../simple2x.cpp		\
	../thumb.h		\
	../unzip.cpp		\
	../unzip.h


TestEmu_LDADD = ../gb/libgb.a ../prof/libprof.a ../i386/lib386.a -L/usr/lib/i386-linux-gnu -lSDL

TestEmu_DEPENDENCIES = ../gb/libgb.a ../prof/libprof.a ../i386/lib386.a

AM_CPPFLAGS = \
	-I$(top_srcdir)/src		\
	-DSDL				\
	-DSYSCONFDIR=\"$(sysconfdir)\"


AM_CXXFLAGS = -fno-exceptions -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
subdir = src/sdl
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_CLEAN_FILES =
bin_PROGRAMS = VisualBoyAdvance$(EXEEXT)
noinst_PROGRAMS = TestEmu$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)

am_TestEmu_OBJECTS = TestEmu.$(OBJEXT) debugger.$(OBJEXT) \
	2xSaI.$(OBJEXT) Cheats.$(OBJEXT) EEprom.$(OBJEXT) \
	Flash.$(OBJEXT) GBA.$(OBJEXT) GBALink.$(OBJEXT) Gfx.$(OBJEXT) Globals.$(OBJEXT) \
	Mode0.$(OBJEXT) Mode1.$(OBJEXT) Mode2.$(OBJEXT) Mode3.$(OBJEXT) \
	Mode4.$(OBJEXT) Mode5.$(OBJEXT) RTC.$(OBJEXT) Sound.$(OBJEXT) \
	Sram.$(OBJEXT) Text.$(OBJEXT) Util.$(OBJEXT) admame.$(OBJEXT) \
	agbprint.$(OBJEXT) armdis.$(OBJEXT) bios.$(OBJEXT) \
	elf.$(OBJEXT) expr-lex.$(OBJEXT) expr.$(OBJEXT) \
	exprNode.$(OBJEXT) hq2x.$(OBJEXT) memgzio.$(OBJEXT) \
	motionblur.$(OBJEXT) pixel.$(OBJEXT) remote.$(OBJEXT) \
	scanline.$(OBJEXT) simple2x.$(OBJEXT) unzip.$(OBJEXT)
TestEmu_OBJECTS = $(am_TestEmu_OBJECTS)
TestEmu_LDFLAGS = 
am_VisualBoyAdvance_OBJECTS = SDL.$(OBJEXT) debugger.$(OBJEXT) \
	2xSaI.$(OBJEXT) Cheats.$(OBJEXT) EEprom.$(OBJEXT) \
	Flash.$(OBJEXT) GBA.$(OBJEXT) GBALink.$(OBJEXT) Gfx.$(OBJEXT) Globals.$(OBJEXT) \
	Mode0.$(OBJEXT) Mode1.$(OBJEXT) Mode2.$(OBJEXT) Mode3.$(OBJEXT) \
	Mode4.$(OBJEXT) Mode5.$(OBJEXT) RTC.$(OBJEXT) Sound.$(OBJEXT) \
	Sram.$(OBJEXT) Text.$(OBJEXT) Util.$(OBJEXT) admame.$(OBJEXT) \
	agbprint.$(OBJEXT) armdis.$(OBJEXT) bilinear.$(OBJEXT) \
	bios.$(OBJEXT) elf.$(OBJEXT) expr-lex.$(OBJEXT) expr.$(OBJEXT) \
	exprNode.$(OBJEXT) getopt.$(OBJEXT) getopt1.$(OBJEXT) \
	hq2x.$(OBJEXT) interframe.$(OBJEXT) memgzio.$(OBJEXT) \
	motionblur.$(OBJEXT) pixel.$(OBJEXT) remote.$(OBJEXT) \
	scanline.$(OBJEXT) simple2x.$(OBJEXT) unzip.$(OBJEXT)
VisualBoyAdvance_OBJECTS = $(am_VisualBoyAdvance_OBJECTS)
VisualBoyAdvance_LDFLAGS =

DEFAULT_INCLUDES =  -I. -I$(srcdir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/2xSaI.Po ./$(DEPDIR)/Cheats.Po \
	./$(DEPDIR)/EEprom.Po ./$(DEPDIR)/Flash.Po \
	./$(DEPDIR)/GBA.Po ./$(DEPDIR)/GBALink.Po ./$(DEPDIR)/Gfx.Po \
	./$(DEPDIR)/Globals.Po ./$(DEPDIR)/Mode0.Po \
	./$(DEPDIR)/Mode1.Po ./$(DEPDIR)/Mode2.Po \
	./$(DEPDIR)/Mode3.Po ./$(DEPDIR)/Mode4.Po \
	./$(DEPDIR)/Mode5.Po ./$(DEPDIR)/RTC.Po \
	./$(DEPDIR)/SDL.Po ./$(DEPDIR)/Sound.Po \
	./$(DEPDIR)/Sram.Po ./$(DEPDIR)/TestEmu.Po \
	./$(DEPDIR)/Text.Po ./$(DEPDIR)/Util.Po \
	./$(DEPDIR)/admame.Po ./$(DEPDIR)/agbprint.Po \
	./$(DEPDIR)/armdis.Po ./$(DEPDIR)/bilinear.Po \
	./$(DEPDIR)/bios.Po ./$(DEPDIR)/debugger.Po \
	./$(DEPDIR)/elf.Po ./$(DEPDIR)/expr-lex.Po \
	./$(DEPDIR)/expr.Po ./$(DEPDIR)/exprNode.Po \
	./$(DEPDIR)/getopt.Po ./$(DEPDIR)/getopt1.Po \
	./$(DEPDIR)/hq2x.Po ./$(DEPDIR)/interframe.Po \
	./$(DEPDIR)/memgzio.Po ./$(DEPDIR)/motionblur.Po \
	./$(DEPDIR)/pixel.Po ./$(DEPDIR)/remote.Po \
	./$(DEPDIR)/scanline.Po ./$(DEPDIR)/simple2x.Po \
	./$(DEPDIR)/unzip.Po
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
DIST_SOURCES = $(TestEmu_SOURCES) $(VisualBoyAdvance_SOURCES)
DIST_COMMON = $(srcdir)/Makefile.in Makefile.am
SOURCES = $(TestEmu_SOURCES) $(VisualBoyAdvance_SOURCES)

all: all-am

.SUFFIXES:
.SUFFIXES: .c .cpp .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/sdl/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

clean-noinstPROGRAMS:
	-test -z "$(noinst_PROGRAMS)" || rm -f $(noinst_PROGRAMS)
TestEmu$(EXEEXT): $(TestEmu_OBJECTS) $(TestEmu_DEPENDENCIES) 
	@rm -f TestEmu$(EXEEXT)
	$(CXXLINK) $(TestEmu_LDFLAGS) $(TestEmu_OBJECTS) $(TestEmu_LDADD) $(LIBS)
VisualBoyAdvance$(EXEEXT): $(VisualBoyAdvance_OBJECTS) $(VisualBoyAdvance_DEPENDENCIES) 
	@rm -f VisualBoyAdvance$(EXEEXT)
	$(CXXLINK) $(VisualBoyAdvance_LDFLAGS) $(VisualBoyAdvance_OBJECTS) $(VisualBoyAdvance_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/2xSaI.Po
include ./$(DEPDIR)/Cheats.Po
include ./$(DEPDIR)/EEprom.Po
include ./$(DEPDIR)/Flash.Po
include ./$(DEPDIR)/GBA.Po
include ./$(DEPDIR)/GBALink.Po
include ./$(DEPDIR)/Gfx.Po
include ./$(DEPDIR)/Globals.Po
include ./$(DEPDIR)/Mode0.Po
include ./$(DEPDIR)/Mode1.Po
include ./$(DEPDIR)/Mode2.Po
include ./$(DEPDIR)/Mode3.Po
include ./$(DEPDIR)/Mode4.Po
include ./$(DEPDIR)/Mode5.Po
include ./$(DEPDIR)/RTC.Po
include ./$(DEPDIR)/SDL.Po
include ./$(DEPDIR)/Sound.Po
include ./$(DEPDIR)/Sram.Po
include ./$(DEPDIR)/TestEmu.Po
include ./$(DEPDIR)/Text.Po
include ./$(DEPDIR)/Util.Po
include ./$(DEPDIR)/admame.Po
include ./$(DEPDIR)/agbprint.Po
include ./$(DEPDIR)/armdis.Po
include ./$(DEPDIR)/bilinear.Po
include ./$(DEPDIR)/bios.Po
include ./$(DEPDIR)/debugger.Po
include ./$(DEPDIR)/elf.Po
include ./$(DEPDIR)/expr-lex.Po
include ./$(DEPDIR)/expr.Po
include ./$(DEPDIR)/exprNode.Po
include ./$(DEPDIR)/getopt.Po
include ./$(DEPDIR)/getopt1.Po
include ./$(DEPDIR)/hq2x.Po
include ./$(DEPDIR)/interframe.Po
include ./$(DEPDIR)/memgzio.Po
include ./$(DEPDIR)/motionblur.Po
include ./$(DEPDIR)/pixel.Po
include ./$(DEPDIR)/remote.Po
include ./$(DEPDIR)/scanline.Po
include ./$(DEPDIR)/simple2x.Po
include ./$(DEPDIR)/unzip.Po

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `test -f '$<' || echo '$(srcdir)/'`$<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`

memgzio.o: ../memgzio.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT memgzio.o -MD -MP -MF "$(DEPDIR)/memgzio.Tpo" \
	  -c -o memgzio.o `test -f '../memgzio.c' || echo '$(srcdir)/'`../memgzio.c; \
	then mv -f "$(DEPDIR)/memgzio.Tpo" "$(DEPDIR)/memgzio.Po"; \
	else rm -f "$(DEPDIR)/memgzio.Tpo"; exit 1; \
	fi
#	source='../memgzio.c' object='memgzio.o' libtool=no \
#	depfile='$(DEPDIR)/memgzio.Po' tmpdepfile='$(DEPDIR)/memgzio.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o memgzio.o `test -f '../memgzio.c' || echo '$(srcdir)/'`../memgzio.c

memgzio.obj: ../memgzio.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT memgzio.obj -MD -MP -MF "$(DEPDIR)/memgzio.Tpo" \
	  -c -o memgzio.obj `if test -f '../memgzio.c'; then $(CYGPATH_W) '../memgzio.c'; else $(CYGPATH_W) '$(srcdir)/../memgzio.c'; fi`; \
	then mv -f "$(DEPDIR)/memgzio.Tpo" "$(DEPDIR)/memgzio.Po"; \
	else rm -f "$(DEPDIR)/memgzio.Tpo"; exit 1; \
	fi
#	source='../memgzio.c' object='memgzio.obj' libtool=no \
#	depfile='$(DEPDIR)/memgzio.Po' tmpdepfile='$(DEPDIR)/memgzio.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o memgzio.obj `if test -f '../memgzio.c'; then $(CYGPATH_W) '../memgzio.c'; else $(CYGPATH_W) '$(srcdir)/../memgzio.c'; fi`

getopt.o: ../getopt.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT getopt.o -MD -MP -MF "$(DEPDIR)/getopt.Tpo" \
	  -c -o getopt.o `test -f '../getopt.c' || echo '$(srcdir)/'`../getopt.c; \
	then mv -f "$(DEPDIR)/getopt.Tpo" "$(DEPDIR)/getopt.Po"; \
	else rm -f "$(DEPDIR)/getopt.Tpo"; exit 1; \
	fi
#	source='../getopt.c' object='getopt.o' libtool=no \
#	depfile='$(DEPDIR)/getopt.Po' tmpdepfile='$(DEPDIR)/getopt.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o getopt.o `test -f '../getopt.c' || echo '$(srcdir)/'`../getopt.c

getopt.obj: ../getopt.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT getopt.obj -MD -MP -MF "$(DEPDIR)/getopt.Tpo" \
	  -c -o getopt.obj `if test -f '../getopt.c'; then $(CYGPATH_W) '../getopt.c'; else $(CYGPATH_W) '$(srcdir)/../getopt.c'; fi`; \
	then mv -f "$(DEPDIR)/getopt.Tpo" "$(DEPDIR)/getopt.Po"; \
	else rm -f "$(DEPDIR)/getopt.Tpo"; exit 1; \
	fi
#	source='../getopt.c' object='getopt.obj' libtool=no \
#	depfile='$(DEPDIR)/getopt.Po' tmpdepfile='$(DEPDIR)/getopt.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o getopt.obj `if test -f '../getopt.c'; then $(CYGPATH_W) '../getopt.c'; else $(CYGPATH_W) '$(srcdir)/../getopt.c'; fi`

getopt1.o: ../getopt1.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT getopt1.o -MD -MP -MF "$(DEPDIR)/getopt1.Tpo" \
	  -c -o getopt1.o `test -f '../getopt1.c' || echo '$(srcdir)/'`../getopt1.c; \
	then mv -f "$(DEPDIR)/getopt1.Tpo" "$(DEPDIR)/getopt1.Po"; \
	else rm -f "$(DEPDIR)/getopt1.Tpo"; exit 1; \
	fi
#	source='../getopt1.c' object='getopt1.o' libtool=no \
#	depfile='$(DEPDIR)/getopt1.Po' tmpdepfile='$(DEPDIR)/getopt1.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o getopt1.o `test -f '../getopt1.c' || echo '$(srcdir)/'`../getopt1.c

getopt1.obj: ../getopt1.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT getopt1.obj -MD -MP -MF "$(DEPDIR)/getopt1.Tpo" \
	  -c -o getopt1.obj `if test -f '../getopt1.c'; then $(CYGPATH_W) '../getopt1.c'; else $(CYGPATH_W) '$(srcdir)/../getopt1.c'; fi`; \
	then mv -f "$(DEPDIR)/getopt1.Tpo" "$(DEPDIR)/getopt1.Po"; \
	else rm -f "$(DEPDIR)/getopt1.Tpo"; exit 1; \
	fi
#	source='../getopt1.c' object='getopt1.obj' libtool=no \
#	depfile='$(DEPDIR)/getopt1.Po' tmpdepfile='$(DEPDIR)/getopt1.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o getopt1.obj `if test -f '../getopt1.c'; then $(CYGPATH_W) '../getopt1.c'; else $(CYGPATH_W) '$(srcdir)/../getopt1.c'; fi`

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`

2xSaI.o: ../2xSaI.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT 2xSaI.o -MD -MP -MF "$(DEPDIR)/2xSaI.Tpo" \
	  -c -o 2xSaI.o `test -f '../2xSaI.cpp' || echo '$(srcdir)/'`../2xSaI.cpp; \
	then mv -f "$(DEPDIR)/2xSaI.Tpo" "$(DEPDIR)/2xSaI.Po"; \
	else rm -f "$(DEPDIR)/2xSaI.Tpo"; exit 1; \
	fi
#	source='../2xSaI.cpp' object='2xSaI.o' libtool=no \
#	depfile='$(DEPDIR)/2xSaI.Po' tmpdepfile='$(DEPDIR)/2xSaI.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o 2xSaI.o `test -f '../2xSaI.cpp' || echo '$(srcdir)/'`../2xSaI.cpp

2xSaI.obj: ../2xSaI.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT 2xSaI.obj -MD -MP -MF "$(DEPDIR)/2xSaI.Tpo" \
	  -c -o 2xSaI.obj `if test -f '../2xSaI.cpp'; then $(CYGPATH_W) '../2xSaI.cpp'; else $(CYGPATH_W) '$(srcdir)/../2xSaI.cpp'; fi`; \
	then mv -f "$(DEPDIR)/2xSaI.Tpo" "$(DEPDIR)/2xSaI.Po"; \
	else rm -f "$(DEPDIR)/2xSaI.Tpo"; exit 1; \
	fi
#	source='../2xSaI.cpp' object='2xSaI.obj' libtool=no \
#	depfile='$(DEPDIR)/2xSaI.Po' tmpdepfile='$(DEPDIR)/2xSaI.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o 2xSaI.obj `if test -f '../2xSaI.cpp'; then $(CYGPATH_W) '../2xSaI.cpp'; else $(CYGPATH_W) '$(srcdir)/../2xSaI.cpp'; fi`

Cheats.o: ../Cheats.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Cheats.o -MD -MP -MF "$(DEPDIR)/Cheats.Tpo" \
	  -c -o Cheats.o `test -f '../Cheats.cpp' || echo '$(srcdir)/'`../Cheats.cpp; \
	then mv -f "$(DEPDIR)/Cheats.Tpo" "$(DEPDIR)/Cheats.Po"; \
	else rm -f "$(DEPDIR)/Cheats.Tpo"; exit 1; \
	fi
#	source='../Cheats.cpp' object='Cheats.o' libtool=no \
#	depfile='$(DEPDIR)/Cheats.Po' tmpdepfile='$(DEPDIR)/Cheats.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Cheats.o `test -f '../Cheats.cpp' || echo '$(srcdir)/'`../Cheats.cpp

Cheats.obj: ../Cheats.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Cheats.obj -MD -MP -MF "$(DEPDIR)/Cheats.Tpo" \
	  -c -o Cheats.obj `if test -f '../Cheats.cpp'; then $(CYGPATH_W) '../Cheats.cpp'; else $(CYGPATH_W) '$(srcdir)/../Cheats.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Cheats.Tpo" "$(DEPDIR)/Cheats.Po"; \
	else rm -f "$(DEPDIR)/Cheats.Tpo"; exit 1; \
	fi
#	source='../Cheats.cpp' object='Cheats.obj' libtool=no \
#	depfile='$(DEPDIR)/Cheats.Po' tmpdepfile='$(DEPDIR)/Cheats.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Cheats.obj `if test -f '../Cheats.cpp'; then $(CYGPATH_W) '../Cheats.cpp'; else $(CYGPATH_W) '$(srcdir)/../Cheats.cpp'; fi`

EEprom.o: ../EEprom.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EEprom.o -MD -MP -MF "$(DEPDIR)/EEprom.Tpo" \
	  -c -o EEprom.o `test -f '../EEprom.cpp' || echo '$(srcdir)/'`../EEprom.cpp; \
	then mv -f "$(DEPDIR)/EEprom.Tpo" "$(DEPDIR)/EEprom.Po"; \
	else rm -f "$(DEPDIR)/EEprom.Tpo"; exit 1; \
	fi
#	source='../EEprom.cpp' object='EEprom.o' libtool=no \
#	depfile='$(DEPDIR)/EEprom.Po' tmpdepfile='$(DEPDIR)/EEprom.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EEprom.o `test -f '../EEprom.cpp' || echo '$(srcdir)/'`../EEprom.cpp

EEprom.obj: ../EEprom.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EEprom.obj -MD -MP -MF "$(DEPDIR)/EEprom.Tpo" \
	  -c -o EEprom.obj `if test -f '../EEprom.cpp'; then $(CYGPATH_W) '../EEprom.cpp'; else $(CYGPATH_W) '$(srcdir)/../EEprom.cpp'; fi`; \
	then mv -f "$(DEPDIR)/EEprom.Tpo" "$(DEPDIR)/EEprom.Po"; \
	else rm -f "$(DEPDIR)/EEprom.Tpo"; exit 1; \
	fi
#	source='../EEprom.cpp' object='EEprom.obj' libtool=no \
#	depfile='$(DEPDIR)/EEprom.Po' tmpdepfile='$(DEPDIR)/EEprom.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EEprom.obj `if test -f '../EEprom.cpp'; then $(CYGPATH_W) '../EEprom.cpp'; else $(CYGPATH_W) '$(srcdir)/../EEprom.cpp'; fi`

Flash.o: ../Flash.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Flash.o -MD -MP -MF "$(DEPDIR)/Flash.Tpo" \
	  -c -o Flash.o `test -f '../Flash.cpp' || echo '$(srcdir)/'`../Flash.cpp; \
	then mv -f "$(DEPDIR)/Flash.Tpo" "$(DEPDIR)/Flash.Po"; \
	else rm -f "$(DEPDIR)/Flash.Tpo"; exit 1; \
	fi
#	source='../Flash.cpp' object='Flash.o' libtool=no \
#	depfile='$(DEPDIR)/Flash.Po' tmpdepfile='$(DEPDIR)/Flash.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Flash.o `test -f '../Flash.cpp' || echo '$(srcdir)/'`../Flash.cpp

Flash.obj: ../Flash.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Flash.obj -MD -MP -MF "$(DEPDIR)/Flash.Tpo" \
	  -c -o Flash.obj `if test -f '../Flash.cpp'; then $(CYGPATH_W) '../Flash.cpp'; else $(CYGPATH_W) '$(srcdir)/../Flash.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Flash.Tpo" "$(DEPDIR)/Flash.Po"; \
	else rm -f "$(DEPDIR)/Flash.Tpo"; exit 1; \
	fi
#	source='../Flash.cpp' object='Flash.obj' libtool=no \
#	depfile='$(DEPDIR)/Flash.Po' tmpdepfile='$(DEPDIR)/Flash.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Flash.obj `if test -f '../Flash.cpp'; then $(CYGPATH_W) '../Flash.cpp'; else $(CYGPATH_W) '$(srcdir)/../Flash.cpp'; fi`

GBA.o: ../GBA.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GBA.o -MD -MP -MF "$(DEPDIR)/GBA.Tpo" \
	  -c -o GBA.o `test -f '../GBA.cpp' || echo '$(srcdir)/'`../GBA.cpp; \
	then mv -f "$(DEPDIR)/GBA.Tpo" "$(DEPDIR)/GBA.Po"; \
	else rm -f "$(DEPDIR)/GBA.Tpo"; exit 1; \
	fi
#	source='../GBA.cpp' object='GBA.o' libtool=no \
#	depfile='$(DEPDIR)/GBA.Po' tmpdepfile='$(DEPDIR)/GBA.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GBA.o `test -f '../GBA.cpp' || echo '$(srcdir)/'`../GBA.cpp

GBA.obj: ../GBA.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GBA.obj -MD -MP -MF "$(DEPDIR)/GBA.Tpo" \
	  -c -o GBA.obj `if test -f '../GBA.cpp'; then $(CYGPATH_W) '../GBA.cpp'; else $(CYGPATH_W) '$(srcdir)/../GBA.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GBA.Tpo" "$(DEPDIR)/GBA.Po"; \
	else rm -f "$(DEPDIR)/GBA.Tpo"; exit 1; \
	fi
#	source='../GBA.cpp' object='GBA.obj' libtool=no \
#	depfile='$(DEPDIR)/GBA.Po' tmpdepfile='$(DEPDIR)/GBA.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GBA.obj `if test -f '../GBA.cpp'; then $(CYGPATH_W) '../GBA.cpp'; else $(CYGPATH_W) '$(srcdir)/../GBA.cpp'; fi`

GBALink.o: ../GBALink.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GBALink.o -MD -MP -MF "$(DEPDIR)/GBALink.Tpo" \
	  -c -o GBALink.o `test -f '../GBALink.cpp' -lrt || echo '$(srcdir)/'`../GBALink.cpp; \
	then mv -f "$(DEPDIR)/GBALink.Tpo" "$(DEPDIR)/GBALink.Po"; \
	else rm -f "$(DEPDIR)/GBALink.Tpo"; exit 1; \
	fi
#	source='../GBALink.cpp' object='GBALink.o' libtool=no \
#	depfile='$(DEPDIR)/GBALink.Po' tmpdepfile='$(DEPDIR)/GBALink.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GBALink.o `test -f '../GBALink.cpp' || echo '$(srcdir)/'`../GBALink.cpp

Gfx.o: ../Gfx.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Gfx.o -MD -MP -MF "$(DEPDIR)/Gfx.Tpo" \
	  -c -o Gfx.o `test -f '../Gfx.cpp' || echo '$(srcdir)/'`../Gfx.cpp; \
	then mv -f "$(DEPDIR)/Gfx.Tpo" "$(DEPDIR)/Gfx.Po"; \
	else rm -f "$(DEPDIR)/Gfx.Tpo"; exit 1; \
	fi
#	source='../Gfx.cpp' object='Gfx.o' libtool=no \
#	depfile='$(DEPDIR)/Gfx.Po' tmpdepfile='$(DEPDIR)/Gfx.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Gfx.o `test -f '../Gfx.cpp' || echo '$(srcdir)/'`../Gfx.cpp

Gfx.obj: ../Gfx.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Gfx.obj -MD -MP -MF "$(DEPDIR)/Gfx.Tpo" \
	  -c -o Gfx.obj `if test -f '../Gfx.cpp'; then $(CYGPATH_W) '../Gfx.cpp'; else $(CYGPATH_W) '$(srcdir)/../Gfx.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Gfx.Tpo" "$(DEPDIR)/Gfx.Po"; \
	else rm -f "$(DEPDIR)/Gfx.Tpo"; exit 1; \
	fi
#	source='../Gfx.cpp' object='Gfx.obj' libtool=no \
#	depfile='$(DEPDIR)/Gfx.Po' tmpdepfile='$(DEPDIR)/Gfx.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Gfx.obj `if test -f '../Gfx.cpp'; then $(CYGPATH_W) '../Gfx.cpp'; else $(CYGPATH_W) '$(srcdir)/../Gfx.cpp'; fi`

Globals.o: ../Globals.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Globals.o -MD -MP -MF "$(DEPDIR)/Globals.Tpo" \
	  -c -o Globals.o `test -f '../Globals.cpp' || echo '$(srcdir)/'`../Globals.cpp; \
	then mv -f "$(DEPDIR)/Globals.Tpo" "$(DEPDIR)/Globals.Po"; \
	else rm -f "$(DEPDIR)/Globals.Tpo"; exit 1; \
	fi
#	source='../Globals.cpp' object='Globals.o' libtool=no \
#	depfile='$(DEPDIR)/Globals.Po' tmpdepfile='$(DEPDIR)/Globals.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Globals.o `test -f '../Globals.cpp' || echo '$(srcdir)/'`../Globals.cpp

Globals.obj: ../Globals.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Globals.obj -MD -MP -MF "$(DEPDIR)/Globals.Tpo" \
	  -c -o Globals.obj `if test -f '../Globals.cpp'; then $(CYGPATH_W) '../Globals.cpp'; else $(CYGPATH_W) '$(srcdir)/../Globals.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Globals.Tpo" "$(DEPDIR)/Globals.Po"; \
	else rm -f "$(DEPDIR)/Globals.Tpo"; exit 1; \
	fi
#	source='../Globals.cpp' object='Globals.obj' libtool=no \
#	depfile='$(DEPDIR)/Globals.Po' tmpdepfile='$(DEPDIR)/Globals.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Globals.obj `if test -f '../Globals.cpp'; then $(CYGPATH_W) '../Globals.cpp'; else $(CYGPATH_W) '$(srcdir)/../Globals.cpp'; fi`

Mode0.o: ../Mode0.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Mode0.o -MD -MP -MF "$(DEPDIR)/Mode0.Tpo" \
	  -c -o Mode0.o `test -f '../Mode0.cpp' || echo '$(srcdir)/'`../Mode0.cpp; \
	then mv -f "$(DEPDIR)/Mode0.Tpo" "$(DEPDIR)/Mode0.Po"; \
	else rm -f "$(DEPDIR)/Mode0.Tpo"; exit 1; \
	fi
#	source='../Mode0.cpp' object='Mode0.o' libtool=no \
#	depfile='$(DEPDIR)/Mode0.Po' tmpdepfile='$(DEPDIR)/Mode0.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Mode0.o `test -f '../Mode0.cpp' || echo '$(srcdir)/'`../Mode0.cpp

Mode0.obj: ../Mode0.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Mode0.obj -MD -MP -MF "$(DEPDIR)/Mode0.Tpo" \
	  -c -o Mode0.obj `if test -f '../Mode0.cpp'; then $(CYGPATH_W) '../Mode0.cpp'; else $(CYGPATH_W) '$(srcdir)/../Mode0.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Mode0.Tpo" "$(DEPDIR)/Mode0.Po"; \
	else rm -f "$(DEPDIR)/Mode0.Tpo"; exit 1; \
	fi
#	source='../Mode0.cpp' object='Mode0.obj' libtool=no \
#	depfile='$(DEPDIR)/Mode0.Po' tmpdepfile='$(DEPDIR)/Mode0.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Mode0.obj `if test -f '../Mode0.cpp'; then $(CYGPATH_W) '../Mode0.cpp'; else $(CYGPATH_W) '$(srcdir)/../Mode0.cpp'; fi`

Mode1.o: ../Mode1.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Mode1.o -MD -MP -MF "$(DEPDIR)/Mode1.Tpo" \
	  -c -o Mode1.o `test -f '../Mode1.cpp' || echo '$(srcdir)/'`../Mode1.cpp; \
	then mv -f "$(DEPDIR)/Mode1.Tpo" "$(DEPDIR)/Mode1.Po"; \
	else rm -f "$(DEPDIR)/Mode1.Tpo"; exit 1; \
	fi
#	source='../Mode1.cpp' object='Mode1.o' libtool=no \
#	depfile='$(DEPDIR)/Mode1.Po' tmpdepfile='$(DEPDIR)/Mode1.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Mode1.o `test -f '../Mode1.cpp' || echo '$(srcdir)/'`../Mode1.cpp

Mode1.obj: ../Mode1.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Mode1.obj -MD -MP -MF "$(DEPDIR)/Mode1.Tpo" \
	  -c -o Mode1.obj `if test -f '../Mode1.cpp'; then $(CYGPATH_W) '../Mode1.cpp'; else $(CYGPATH_W) '$(srcdir)/../Mode1.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Mode1.Tpo" "$(DEPDIR)/Mode1.Po"; \
	else rm -f "$(DEPDIR)/Mode1.Tpo"; exit 1; \
	fi
#	source='../Mode1.cpp' object='Mode1.obj' libtool=no \
#	depfile='$(DEPDIR)/Mode1.Po' tmpdepfile='$(DEPDIR)/Mode1.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Mode1.obj `if test -f '../Mode1.cpp'; then $(CYGPATH_W) '../Mode1.cpp'; else $(CYGPATH_W) '$(srcdir)/../Mode1.cpp'; fi`

Mode2.o: ../Mode2.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Mode2.o -MD -MP -MF "$(DEPDIR)/Mode2.Tpo" \
	  -c -o Mode2.o `test -f '../Mode2.cpp' || echo '$(srcdir)/'`../Mode2.cpp; \
	then mv -f "$(DEPDIR)/Mode2.Tpo" "$(DEPDIR)/Mode2.Po"; \
	else rm -f "$(DEPDIR)/Mode2.Tpo"; exit 1; \
	fi
#	source='../Mode2.cpp' object='Mode2.o' libtool=no \
#	depfile='$(DEPDIR)/Mode2.Po' tmpdepfile='$(DEPDIR)/Mode2.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Mode2.o `test -f '../Mode2.cpp' || echo '$(srcdir)/'`../Mode2.cpp

Mode2.obj: ../Mode2.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Mode2.obj -MD -MP -MF "$(DEPDIR)/Mode2.Tpo" \
	  -c -o Mode2.obj `if test -f '../Mode2.cpp'; then $(CYGPATH_W) '../Mode2.cpp'; else $(CYGPATH_W) '$(srcdir)/../Mode2.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Mode2.Tpo" "$(DEPDIR)/Mode2.Po"; \
	else rm -f "$(DEPDIR)/Mode2.Tpo"; exit 1; \
	fi
#	source='../Mode2.cpp' object='Mode2.obj' libtool=no \
#	depfile='$(DEPDIR)/Mode2.Po' tmpdepfile='$(DEPDIR)/Mode2.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Mode2.obj `if test -f '../Mode2.cpp'; then $(CYGPATH_W) '../Mode2.cpp'; else $(CYGPATH_W) '$(srcdir)/../Mode2.cpp'; fi`

Mode3.o: ../Mode3.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Mode3.o -MD -MP -MF "$(DEPDIR)/Mode3.Tpo" \
	  -c -o Mode3.o `test -f '../Mode3.cpp' || echo '$(srcdir)/'`../Mode3.cpp; \
	then mv -f "$(DEPDIR)/Mode3.Tpo" "$(DEPDIR)/Mode3.Po"; \
	else rm -f "$(DEPDIR)/Mode3.Tpo"; exit 1; \
	fi
#	source='../Mode3.cpp' object='Mode3.o' libtool=no \
#	depfile='$(DEPDIR)/Mode3.Po' tmpdepfile='$(DEPDIR)/Mode3.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Mode3.o `test -f '../Mode3.cpp' || echo '$(srcdir)/'`../Mode3.cpp

Mode3.obj: ../Mode3.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Mode3.obj -MD -MP -MF "$(DEPDIR)/Mode3.Tpo" \
	  -c -o Mode3.obj `if test -f '../Mode3.cpp'; then $(CYGPATH_W) '../Mode3.cpp'; else $(CYGPATH_W) '$(srcdir)/../Mode3.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Mode3.Tpo" "$(DEPDIR)/Mode3.Po"; \
	else rm -f "$(DEPDIR)/Mode3.Tpo"; exit 1; \
	fi
#	source='../Mode3.cpp' object='Mode3.obj' libtool=no \
#	depfile='$(DEPDIR)/Mode3.Po' tmpdepfile='$(DEPDIR)/Mode3.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Mode3.obj `if test -f '../Mode3.cpp'; then $(CYGPATH_W) '../Mode3.cpp'; else $(CYGPATH_W) '$(srcdir)/../Mode3.cpp'; fi`

Mode4.o: ../Mode4.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Mode4.o -MD -MP -MF "$(DEPDIR)/Mode4.Tpo" \
	  -c -o Mode4.o `test -f '../Mode4.cpp' || echo '$(srcdir)/'`../Mode4.cpp; \
	then mv -f "$(DEPDIR)/Mode4.Tpo" "$(DEPDIR)/Mode4.Po"; \
	else rm -f "$(DEPDIR)/Mode4.Tpo"; exit 1; \
	fi
#	source='../Mode4.cpp' object='Mode4.o' libtool=no \
#	depfile='$(DEPDIR)/Mode4.Po' tmpdepfile='$(DEPDIR)/Mode4.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Mode4.o `test -f '../Mode4.cpp' || echo '$(srcdir)/'`../Mode4.cpp

Mode4.obj: ../Mode4.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Mode4.obj -MD -MP -MF "$(DEPDIR)/Mode4.Tpo" \
	  -c -o Mode4.obj `if test -f '../Mode4.cpp'; then $(CYGPATH_W) '../Mode4.cpp'; else $(CYGPATH_W) '$(srcdir)/../Mode4.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Mode4.Tpo" "$(DEPDIR)/Mode4.Po"; \
	else rm -f "$(DEPDIR)/Mode4.Tpo"; exit 1; \
	fi
#	source='../Mode4.cpp' object='Mode4.obj' libtool=no \
#	depfile='$(DEPDIR)/Mode4.Po' tmpdepfile='$(DEPDIR)/Mode4.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Mode4.obj `if test -f '../Mode4.cpp'; then $(CYGPATH_W) '../Mode4.cpp'; else $(CYGPATH_W) '$(srcdir)/../Mode4.cpp'; fi`

Mode5.o: ../Mode5.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Mode5.o -MD -MP -MF "$(DEPDIR)/Mode5.Tpo" \
	  -c -o Mode5.o `test -f '../Mode5.cpp' || echo '$(srcdir)/'`../Mode5.cpp; \
	then mv -f "$(DEPDIR)/Mode5.Tpo" "$(DEPDIR)/Mode5.Po"; \
	else rm -f "$(DEPDIR)/Mode5.Tpo"; exit 1; \
	fi
#	source='../Mode5.cpp' object='Mode5.o' libtool=no \
#	depfile='$(DEPDIR)/Mode5.Po' tmpdepfile='$(DEPDIR)/Mode5.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Mode5.o `test -f '../Mode5.cpp' || echo '$(srcdir)/'`../Mode5.cpp

Mode5.obj: ../Mode5.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Mode5.obj -MD -MP -MF "$(DEPDIR)/Mode5.Tpo" \
	  -c -o Mode5.obj `if test -f '../Mode5.cpp'; then $(CYGPATH_W) '../Mode5.cpp'; else $(CYGPATH_W) '$(srcdir)/../Mode5.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Mode5.Tpo" "$(DEPDIR)/Mode5.Po"; \
	else rm -f "$(DEPDIR)/Mode5.Tpo"; exit 1; \
	fi
#	source='../Mode5.cpp' object='Mode5.obj' libtool=no \
#	depfile='$(DEPDIR)/Mode5.Po' tmpdepfile='$(DEPDIR)/Mode5.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Mode5.obj `if test -f '../Mode5.cpp'; then $(CYGPATH_W) '../Mode5.cpp'; else $(CYGPATH_W) '$(srcdir)/../Mode5.cpp'; fi`

RTC.o: ../RTC.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RTC.o -MD -MP -MF "$(DEPDIR)/RTC.Tpo" \
	  -c -o RTC.o `test -f '../RTC.cpp' || echo '$(srcdir)/'`../RTC.cpp; \
	then mv -f "$(DEPDIR)/RTC.Tpo" "$(DEPDIR)/RTC.Po"; \
	else rm -f "$(DEPDIR)/RTC.Tpo"; exit 1; \
	fi
#	source='../RTC.cpp' object='RTC.o' libtool=no \
#	depfile='$(DEPDIR)/RTC.Po' tmpdepfile='$(DEPDIR)/RTC.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RTC.o `test -f '../RTC.cpp' || echo '$(srcdir)/'`../RTC.cpp

RTC.obj: ../RTC.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RTC.obj -MD -MP -MF "$(DEPDIR)/RTC.Tpo" \
	  -c -o RTC.obj `if test -f '../RTC.cpp'; then $(CYGPATH_W) '../RTC.cpp'; else $(CYGPATH_W) '$(srcdir)/../RTC.cpp'; fi`; \
	then mv -f "$(DEPDIR)/RTC.Tpo" "$(DEPDIR)/RTC.Po"; \
	else rm -f "$(DEPDIR)/RTC.Tpo"; exit 1; \
	fi
#	source='../RTC.cpp' object='RTC.obj' libtool=no \
#	depfile='$(DEPDIR)/RTC.Po' tmpdepfile='$(DEPDIR)/RTC.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RTC.obj `if test -f '../RTC.cpp'; then $(CYGPATH_W) '../RTC.cpp'; else $(CYGPATH_W) '$(srcdir)/../RTC.cpp'; fi`

Sound.o: ../Sound.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Sound.o -MD -MP -MF "$(DEPDIR)/Sound.Tpo" \
	  -c -o Sound.o `test -f '../Sound.cpp' || echo '$(srcdir)/'`../Sound.cpp; \
	then mv -f "$(DEPDIR)/Sound.Tpo" "$(DEPDIR)/Sound.Po"; \
	else rm -f "$(DEPDIR)/Sound.Tpo"; exit 1; \
	fi
#	source='../Sound.cpp' object='Sound.o' libtool=no \
#	depfile='$(DEPDIR)/Sound.Po' tmpdepfile='$(DEPDIR)/Sound.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Sound.o `test -f '../Sound.cpp' || echo '$(srcdir)/'`../Sound.cpp

Sound.obj: ../Sound.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Sound.obj -MD -MP -MF "$(DEPDIR)/Sound.Tpo" \
	  -c -o Sound.obj `if test -f '../Sound.cpp'; then $(CYGPATH_W) '../Sound.cpp'; else $(CYGPATH_W) '$(srcdir)/../Sound.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Sound.Tpo" "$(DEPDIR)/Sound.Po"; \
	else rm -f "$(DEPDIR)/Sound.Tpo"; exit 1; \
	fi
#	source='../Sound.cpp' object='Sound.obj' libtool=no \
#	depfile='$(DEPDIR)/Sound.Po' tmpdepfile='$(DEPDIR)/Sound.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Sound.obj `if test -f '../Sound.cpp'; then $(CYGPATH_W) '../Sound.cpp'; else $(CYGPATH_W) '$(srcdir)/../Sound.cpp'; fi`

Sram.o: ../Sram.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Sram.o -MD -MP -MF "$(DEPDIR)/Sram.Tpo" \
	  -c -o Sram.o `test -f '../Sram.cpp' || echo '$(srcdir)/'`../Sram.cpp; \
	then mv -f "$(DEPDIR)/Sram.Tpo" "$(DEPDIR)/Sram.Po"; \
	else rm -f "$(DEPDIR)/Sram.Tpo"; exit 1; \
	fi
#	source='../Sram.cpp' object='Sram.o' libtool=no \
#	depfile='$(DEPDIR)/Sram.Po' tmpdepfile='$(DEPDIR)/Sram.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Sram.o `test -f '../Sram.cpp' || echo '$(srcdir)/'`../Sram.cpp

Sram.obj: ../Sram.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Sram.obj -MD -MP -MF "$(DEPDIR)/Sram.Tpo" \
	  -c -o Sram.obj `if test -f '../Sram.cpp'; then $(CYGPATH_W) '../Sram.cpp'; else $(CYGPATH_W) '$(srcdir)/../Sram.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Sram.Tpo" "$(DEPDIR)/Sram.Po"; \
	else rm -f "$(DEPDIR)/Sram.Tpo"; exit 1; \
	fi
#	source='../Sram.cpp' object='Sram.obj' libtool=no \
#	depfile='$(DEPDIR)/Sram.Po' tmpdepfile='$(DEPDIR)/Sram.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Sram.obj `if test -f '../Sram.cpp'; then $(CYGPATH_W) '../Sram.cpp'; else $(CYGPATH_W) '$(srcdir)/../Sram.cpp'; fi`

Text.o: ../Text.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Text.o -MD -MP -MF "$(DEPDIR)/Text.Tpo" \
	  -c -o Text.o `test -f '../Text.cpp' || echo '$(srcdir)/'`../Text.cpp; \
	then mv -f "$(DEPDIR)/Text.Tpo" "$(DEPDIR)/Text.Po"; \
	else rm -f "$(DEPDIR)/Text.Tpo"; exit 1; \
	fi
#	source='../Text.cpp' object='Text.o' libtool=no \
#	depfile='$(DEPDIR)/Text.Po' tmpdepfile='$(DEPDIR)/Text.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Text.o `test -f '../Text.cpp' || echo '$(srcdir)/'`../Text.cpp

Text.obj: ../Text.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Text.obj -MD -MP -MF "$(DEPDIR)/Text.Tpo" \
	  -c -o Text.obj `if test -f '../Text.cpp'; then $(CYGPATH_W) '../Text.cpp'; else $(CYGPATH_W) '$(srcdir)/../Text.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Text.Tpo" "$(DEPDIR)/Text.Po"; \
	else rm -f "$(DEPDIR)/Text.Tpo"; exit 1; \
	fi
#	source='../Text.cpp' object='Text.obj' libtool=no \
#	depfile='$(DEPDIR)/Text.Po' tmpdepfile='$(DEPDIR)/Text.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Text.obj `if test -f '../Text.cpp'; then $(CYGPATH_W) '../Text.cpp'; else $(CYGPATH_W) '$(srcdir)/../Text.cpp'; fi`

Util.o: ../Util.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Util.o -MD -MP -MF "$(DEPDIR)/Util.Tpo" \
	  -c -o Util.o `test -f '../Util.cpp' || echo '$(srcdir)/'`../Util.cpp; \
	then mv -f "$(DEPDIR)/Util.Tpo" "$(DEPDIR)/Util.Po"; \
	else rm -f "$(DEPDIR)/Util.Tpo"; exit 1; \
	fi
#	source='../Util.cpp' object='Util.o' libtool=no \
#	depfile='$(DEPDIR)/Util.Po' tmpdepfile='$(DEPDIR)/Util.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Util.o `test -f '../Util.cpp' || echo '$(srcdir)/'`../Util.cpp

Util.obj: ../Util.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Util.obj -MD -MP -MF "$(DEPDIR)/Util.Tpo" \
	  -c -o Util.obj `if test -f '../Util.cpp'; then $(CYGPATH_W) '../Util.cpp'; else $(CYGPATH_W) '$(srcdir)/../Util.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Util.Tpo" "$(DEPDIR)/Util.Po"; \
	else rm -f "$(DEPDIR)/Util.Tpo"; exit 1; \
	fi
#	source='../Util.cpp' object='Util.obj' libtool=no \
#	depfile='$(DEPDIR)/Util.Po' tmpdepfile='$(DEPDIR)/Util.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Util.obj `if test -f '../Util.cpp'; then $(CYGPATH_W) '../Util.cpp'; else $(CYGPATH_W) '$(srcdir)/../Util.cpp'; fi`

admame.o: ../admame.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT admame.o -MD -MP -MF "$(DEPDIR)/admame.Tpo" \
	  -c -o admame.o `test -f '../admame.cpp' || echo '$(srcdir)/'`../admame.cpp; \
	then mv -f "$(DEPDIR)/admame.Tpo" "$(DEPDIR)/admame.Po"; \
	else rm -f "$(DEPDIR)/admame.Tpo"; exit 1; \
	fi
#	source='../admame.cpp' object='admame.o' libtool=no \
#	depfile='$(DEPDIR)/admame.Po' tmpdepfile='$(DEPDIR)/admame.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o admame.o `test -f '../admame.cpp' || echo '$(srcdir)/'`../admame.cpp

admame.obj: ../admame.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT admame.obj -MD -MP -MF "$(DEPDIR)/admame.Tpo" \
	  -c -o admame.obj `if test -f '../admame.cpp'; then $(CYGPATH_W) '../admame.cpp'; else $(CYGPATH_W) '$(srcdir)/../admame.cpp'; fi`; \
	then mv -f "$(DEPDIR)/admame.Tpo" "$(DEPDIR)/admame.Po"; \
	else rm -f "$(DEPDIR)/admame.Tpo"; exit 1; \
	fi
#	source='../admame.cpp' object='admame.obj' libtool=no \
#	depfile='$(DEPDIR)/admame.Po' tmpdepfile='$(DEPDIR)/admame.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o admame.obj `if test -f '../admame.cpp'; then $(CYGPATH_W) '../admame.cpp'; else $(CYGPATH_W) '$(srcdir)/../admame.cpp'; fi`

agbprint.o: ../agbprint.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT agbprint.o -MD -MP -MF "$(DEPDIR)/agbprint.Tpo" \
	  -c -o agbprint.o `test -f '../agbprint.cpp' || echo '$(srcdir)/'`../agbprint.cpp; \
	then mv -f "$(DEPDIR)/agbprint.Tpo" "$(DEPDIR)/agbprint.Po"; \
	else rm -f "$(DEPDIR)/agbprint.Tpo"; exit 1; \
	fi
#	source='../agbprint.cpp' object='agbprint.o' libtool=no \
#	depfile='$(DEPDIR)/agbprint.Po' tmpdepfile='$(DEPDIR)/agbprint.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o agbprint.o `test -f '../agbprint.cpp' || echo '$(srcdir)/'`../agbprint.cpp

agbprint.obj: ../agbprint.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT agbprint.obj -MD -MP -MF "$(DEPDIR)/agbprint.Tpo" \
	  -c -o agbprint.obj `if test -f '../agbprint.cpp'; then $(CYGPATH_W) '../agbprint.cpp'; else $(CYGPATH_W) '$(srcdir)/../agbprint.cpp'; fi`; \
	then mv -f "$(DEPDIR)/agbprint.Tpo" "$(DEPDIR)/agbprint.Po"; \
	else rm -f "$(DEPDIR)/agbprint.Tpo"; exit 1; \
	fi
#	source='../agbprint.cpp' object='agbprint.obj' libtool=no \
#	depfile='$(DEPDIR)/agbprint.Po' tmpdepfile='$(DEPDIR)/agbprint.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o agbprint.obj `if test -f '../agbprint.cpp'; then $(CYGPATH_W) '../agbprint.cpp'; else $(CYGPATH_W) '$(srcdir)/../agbprint.cpp'; fi`

armdis.o: ../armdis.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT armdis.o -MD -MP -MF "$(DEPDIR)/armdis.Tpo" \
	  -c -o armdis.o `test -f '../armdis.cpp' || echo '$(srcdir)/'`../armdis.cpp; \
	then mv -f "$(DEPDIR)/armdis.Tpo" "$(DEPDIR)/armdis.Po"; \
	else rm -f "$(DEPDIR)/armdis.Tpo"; exit 1; \
	fi
#	source='../armdis.cpp' object='armdis.o' libtool=no \
#	depfile='$(DEPDIR)/armdis.Po' tmpdepfile='$(DEPDIR)/armdis.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o armdis.o `test -f '../armdis.cpp' || echo '$(srcdir)/'`../armdis.cpp

armdis.obj: ../armdis.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT armdis.obj -MD -MP -MF "$(DEPDIR)/armdis.Tpo" \
	  -c -o armdis.obj `if test -f '../armdis.cpp'; then $(CYGPATH_W) '../armdis.cpp'; else $(CYGPATH_W) '$(srcdir)/../armdis.cpp'; fi`; \
	then mv -f "$(DEPDIR)/armdis.Tpo" "$(DEPDIR)/armdis.Po"; \
	else rm -f "$(DEPDIR)/armdis.Tpo"; exit 1; \
	fi
#	source='../armdis.cpp' object='armdis.obj' libtool=no \
#	depfile='$(DEPDIR)/armdis.Po' tmpdepfile='$(DEPDIR)/armdis.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o armdis.obj `if test -f '../armdis.cpp'; then $(CYGPATH_W) '../armdis.cpp'; else $(CYGPATH_W) '$(srcdir)/../armdis.cpp'; fi`

bios.o: ../bios.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bios.o -MD -MP -MF "$(DEPDIR)/bios.Tpo" \
	  -c -o bios.o `test -f '../bios.cpp' || echo '$(srcdir)/'`../bios.cpp; \
	then mv -f "$(DEPDIR)/bios.Tpo" "$(DEPDIR)/bios.Po"; \
	else rm -f "$(DEPDIR)/bios.Tpo"; exit 1; \
	fi
#	source='../bios.cpp' object='bios.o' libtool=no \
#	depfile='$(DEPDIR)/bios.Po' tmpdepfile='$(DEPDIR)/bios.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bios.o `test -f '../bios.cpp' || echo '$(srcdir)/'`../bios.cpp

bios.obj: ../bios.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bios.obj -MD -MP -MF "$(DEPDIR)/bios.Tpo" \
	  -c -o bios.obj `if test -f '../bios.cpp'; then $(CYGPATH_W) '../bios.cpp'; else $(CYGPATH_W) '$(srcdir)/../bios.cpp'; fi`; \
	then mv -f "$(DEPDIR)/bios.Tpo" "$(DEPDIR)/bios.Po"; \
	else rm -f "$(DEPDIR)/bios.Tpo"; exit 1; \
	fi
#	source='../bios.cpp' object='bios.obj' libtool=no \
#	depfile='$(DEPDIR)/bios.Po' tmpdepfile='$(DEPDIR)/bios.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bios.obj `if test -f '../bios.cpp'; then $(CYGPATH_W) '../bios.cpp'; else $(CYGPATH_W) '$(srcdir)/../bios.cpp'; fi`

elf.o: ../elf.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT elf.o -MD -MP -MF "$(DEPDIR)/elf.Tpo" \
	  -c -o elf.o `test -f '../elf.cpp' || echo '$(srcdir)/'`../elf.cpp; \
	then mv -f "$(DEPDIR)/elf.Tpo" "$(DEPDIR)/elf.Po"; \
	else rm -f "$(DEPDIR)/elf.Tpo"; exit 1; \
	fi
#	source='../elf.cpp' object='elf.o' libtool=no \
#	depfile='$(DEPDIR)/elf.Po' tmpdepfile='$(DEPDIR)/elf.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o elf.o `test -f '../elf.cpp' || echo '$(srcdir)/'`../elf.cpp

elf.obj: ../elf.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT elf.obj -MD -MP -MF "$(DEPDIR)/elf.Tpo" \
	  -c -o elf.obj `if test -f '../elf.cpp'; then $(CYGPATH_W) '../elf.cpp'; else $(CYGPATH_W) '$(srcdir)/../elf.cpp'; fi`; \
	then mv -f "$(DEPDIR)/elf.Tpo" "$(DEPDIR)/elf.Po"; \
	else rm -f "$(DEPDIR)/elf.Tpo"; exit 1; \
	fi
#	source='../elf.cpp' object='elf.obj' libtool=no \
#	depfile='$(DEPDIR)/elf.Po' tmpdepfile='$(DEPDIR)/elf.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o elf.obj `if test -f '../elf.cpp'; then $(CYGPATH_W) '../elf.cpp'; else $(CYGPATH_W) '$(srcdir)/../elf.cpp'; fi`

expr-lex.o: ../expr-lex.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT expr-lex.o -MD -MP -MF "$(DEPDIR)/expr-lex.Tpo" \
	  -c -o expr-lex.o `test -f '../expr-lex.cpp' || echo '$(srcdir)/'`../expr-lex.cpp; \
	then mv -f "$(DEPDIR)/expr-lex.Tpo" "$(DEPDIR)/expr-lex.Po"; \
	else rm -f "$(DEPDIR)/expr-lex.Tpo"; exit 1; \
	fi
#	source='../expr-lex.cpp' object='expr-lex.o' libtool=no \
#	depfile='$(DEPDIR)/expr-lex.Po' tmpdepfile='$(DEPDIR)/expr-lex.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o expr-lex.o `test -f '../expr-lex.cpp' || echo '$(srcdir)/'`../expr-lex.cpp

expr-lex.obj: ../expr-lex.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT expr-lex.obj -MD -MP -MF "$(DEPDIR)/expr-lex.Tpo" \
	  -c -o expr-lex.obj `if test -f '../expr-lex.cpp'; then $(CYGPATH_W) '../expr-lex.cpp'; else $(CYGPATH_W) '$(srcdir)/../expr-lex.cpp'; fi`; \
	then mv -f "$(DEPDIR)/expr-lex.Tpo" "$(DEPDIR)/expr-lex.Po"; \
	else rm -f "$(DEPDIR)/expr-lex.Tpo"; exit 1; \
	fi
#	source='../expr-lex.cpp' object='expr-lex.obj' libtool=no \
#	depfile='$(DEPDIR)/expr-lex.Po' tmpdepfile='$(DEPDIR)/expr-lex.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o expr-lex.obj `if test -f '../expr-lex.cpp'; then $(CYGPATH_W) '../expr-lex.cpp'; else $(CYGPATH_W) '$(srcdir)/../expr-lex.cpp'; fi`

expr.o: ../expr.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT expr.o -MD -MP -MF "$(DEPDIR)/expr.Tpo" \
	  -c -o expr.o `test -f '../expr.cpp' || echo '$(srcdir)/'`../expr.cpp; \
	then mv -f "$(DEPDIR)/expr.Tpo" "$(DEPDIR)/expr.Po"; \
	else rm -f "$(DEPDIR)/expr.Tpo"; exit 1; \
	fi
#	source='../expr.cpp' object='expr.o' libtool=no \
#	depfile='$(DEPDIR)/expr.Po' tmpdepfile='$(DEPDIR)/expr.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o expr.o `test -f '../expr.cpp' || echo '$(srcdir)/'`../expr.cpp

expr.obj: ../expr.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT expr.obj -MD -MP -MF "$(DEPDIR)/expr.Tpo" \
	  -c -o expr.obj `if test -f '../expr.cpp'; then $(CYGPATH_W) '../expr.cpp'; else $(CYGPATH_W) '$(srcdir)/../expr.cpp'; fi`; \
	then mv -f "$(DEPDIR)/expr.Tpo" "$(DEPDIR)/expr.Po"; \
	else rm -f "$(DEPDIR)/expr.Tpo"; exit 1; \
	fi
#	source='../expr.cpp' object='expr.obj' libtool=no \
#	depfile='$(DEPDIR)/expr.Po' tmpdepfile='$(DEPDIR)/expr.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o expr.obj `if test -f '../expr.cpp'; then $(CYGPATH_W) '../expr.cpp'; else $(CYGPATH_W) '$(srcdir)/../expr.cpp'; fi`

exprNode.o: ../exprNode.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT exprNode.o -MD -MP -MF "$(DEPDIR)/exprNode.Tpo" \
	  -c -o exprNode.o `test -f '../exprNode.cpp' || echo '$(srcdir)/'`../exprNode.cpp; \
	then mv -f "$(DEPDIR)/exprNode.Tpo" "$(DEPDIR)/exprNode.Po"; \
	else rm -f "$(DEPDIR)/exprNode.Tpo"; exit 1; \
	fi
#	source='../exprNode.cpp' object='exprNode.o' libtool=no \
#	depfile='$(DEPDIR)/exprNode.Po' tmpdepfile='$(DEPDIR)/exprNode.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o exprNode.o `test -f '../exprNode.cpp' || echo '$(srcdir)/'`../exprNode.cpp

exprNode.obj: ../exprNode.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT exprNode.obj -MD -MP -MF "$(DEPDIR)/exprNode.Tpo" \
	  -c -o exprNode.obj `if test -f '../exprNode.cpp'; then $(CYGPATH_W) '../exprNode.cpp'; else $(CYGPATH_W) '$(srcdir)/../exprNode.cpp'; fi`; \
	then mv -f "$(DEPDIR)/exprNode.Tpo" "$(DEPDIR)/exprNode.Po"; \
	else rm -f "$(DEPDIR)/exprNode.Tpo"; exit 1; \
	fi
#	source='../exprNode.cpp' object='exprNode.obj' libtool=no \
#	depfile='$(DEPDIR)/exprNode.Po' tmpdepfile='$(DEPDIR)/exprNode.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o exprNode.obj `if test -f '../exprNode.cpp'; then $(CYGPATH_W) '../exprNode.cpp'; else $(CYGPATH_W) '$(srcdir)/../exprNode.cpp'; fi`

hq2x.o: ../hq2x.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT hq2x.o -MD -MP -MF "$(DEPDIR)/hq2x.Tpo" \
	  -c -o hq2x.o `test -f '../hq2x.cpp' || echo '$(srcdir)/'`../hq2x.cpp; \
	then mv -f "$(DEPDIR)/hq2x.Tpo" "$(DEPDIR)/hq2x.Po"; \
	else rm -f "$(DEPDIR)/hq2x.Tpo"; exit 1; \
	fi
#	source='../hq2x.cpp' object='hq2x.o' libtool=no \
#	depfile='$(DEPDIR)/hq2x.Po' tmpdepfile='$(DEPDIR)/hq2x.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o hq2x.o `test -f '../hq2x.cpp' || echo '$(srcdir)/'`../hq2x.cpp

hq2x.obj: ../hq2x.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT hq2x.obj -MD -MP -MF "$(DEPDIR)/hq2x.Tpo" \
	  -c -o hq2x.obj `if test -f '../hq2x.cpp'; then $(CYGPATH_W) '../hq2x.cpp'; else $(CYGPATH_W) '$(srcdir)/../hq2x.cpp'; fi`; \
	then mv -f "$(DEPDIR)/hq2x.Tpo" "$(DEPDIR)/hq2x.Po"; \
	else rm -f "$(DEPDIR)/hq2x.Tpo"; exit 1; \
	fi
#	source='../hq2x.cpp' object='hq2x.obj' libtool=no \
#	depfile='$(DEPDIR)/hq2x.Po' tmpdepfile='$(DEPDIR)/hq2x.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o hq2x.obj `if test -f '../hq2x.cpp'; then $(CYGPATH_W) '../hq2x.cpp'; else $(CYGPATH_W) '$(srcdir)/../hq2x.cpp'; fi`

motionblur.o: ../motionblur.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT motionblur.o -MD -MP -MF "$(DEPDIR)/motionblur.Tpo" \
	  -c -o motionblur.o `test -f '../motionblur.cpp' || echo '$(srcdir)/'`../motionblur.cpp; \
	then mv -f "$(DEPDIR)/motionblur.Tpo" "$(DEPDIR)/motionblur.Po"; \
	else rm -f "$(DEPDIR)/motionblur.Tpo"; exit 1; \
	fi
#	source='../motionblur.cpp' object='motionblur.o' libtool=no \
#	depfile='$(DEPDIR)/motionblur.Po' tmpdepfile='$(DEPDIR)/motionblur.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o motionblur.o `test -f '../motionblur.cpp' || echo '$(srcdir)/'`../motionblur.cpp

motionblur.obj: ../motionblur.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT motionblur.obj -MD -MP -MF "$(DEPDIR)/motionblur.Tpo" \
	  -c -o motionblur.obj `if test -f '../motionblur.cpp'; then $(CYGPATH_W) '../motionblur.cpp'; else $(CYGPATH_W) '$(srcdir)/../motionblur.cpp'; fi`; \
	then mv -f "$(DEPDIR)/motionblur.Tpo" "$(DEPDIR)/motionblur.Po"; \
	else rm -f "$(DEPDIR)/motionblur.Tpo"; exit 1; \
	fi
#	source='../motionblur.cpp' object='motionblur.obj' libtool=no \
#	depfile='$(DEPDIR)/motionblur.Po' tmpdepfile='$(DEPDIR)/motionblur.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o motionblur.obj `if test -f '../motionblur.cpp'; then $(CYGPATH_W) '../motionblur.cpp'; else $(CYGPATH_W) '$(srcdir)/../motionblur.cpp'; fi`

pixel.o: ../pixel.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT pixel.o -MD -MP -MF "$(DEPDIR)/pixel.Tpo" \
	  -c -o pixel.o `test -f '../pixel.cpp' || echo '$(srcdir)/'`../pixel.cpp; \
	then mv -f "$(DEPDIR)/pixel.Tpo" "$(DEPDIR)/pixel.Po"; \
	else rm -f "$(DEPDIR)/pixel.Tpo"; exit 1; \
	fi
#	source='../pixel.cpp' object='pixel.o' libtool=no \
#	depfile='$(DEPDIR)/pixel.Po' tmpdepfile='$(DEPDIR)/pixel.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pixel.o `test -f '../pixel.cpp' || echo '$(srcdir)/'`../pixel.cpp

pixel.obj: ../pixel.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT pixel.obj -MD -MP -MF "$(DEPDIR)/pixel.Tpo" \
	  -c -o pixel.obj `if test -f '../pixel.cpp'; then $(CYGPATH_W) '../pixel.cpp'; else $(CYGPATH_W) '$(srcdir)/../pixel.cpp'; fi`; \
	then mv -f "$(DEPDIR)/pixel.Tpo" "$(DEPDIR)/pixel.Po"; \
	else rm -f "$(DEPDIR)/pixel.Tpo"; exit 1; \
	fi
#	source='../pixel.cpp' object='pixel.obj' libtool=no \
#	depfile='$(DEPDIR)/pixel.Po' tmpdepfile='$(DEPDIR)/pixel.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pixel.obj `if test -f '../pixel.cpp'; then $(CYGPATH_W) '../pixel.cpp'; else $(CYGPATH_W) '$(srcdir)/../pixel.cpp'; fi`

remote.o: ../remote.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT remote.o -MD -MP -MF "$(DEPDIR)/remote.Tpo" \
	  -c -o remote.o `test -f '../remote.cpp' || echo '$(srcdir)/'`../remote.cpp; \
	then mv -f "$(DEPDIR)/remote.Tpo" "$(DEPDIR)/remote.Po"; \
	else rm -f "$(DEPDIR)/remote.Tpo"; exit 1; \
	fi
#	source='../remote.cpp' object='remote.o' libtool=no \
#	depfile='$(DEPDIR)/remote.Po' tmpdepfile='$(DEPDIR)/remote.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o remote.o `test -f '../remote.cpp' || echo '$(srcdir)/'`../remote.cpp

remote.obj: ../remote.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT remote.obj -MD -MP -MF "$(DEPDIR)/remote.Tpo" \
	  -c -o remote.obj `if test -f '../remote.cpp'; then $(CYGPATH_W) '../remote.cpp'; else $(CYGPATH_W) '$(srcdir)/../remote.cpp'; fi`; \
	then mv -f "$(DEPDIR)/remote.Tpo" "$(DEPDIR)/remote.Po"; \
	else rm -f "$(DEPDIR)/remote.Tpo"; exit 1; \
	fi
#	source='../remote.cpp' object='remote.obj' libtool=no \
#	depfile='$(DEPDIR)/remote.Po' tmpdepfile='$(DEPDIR)/remote.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o remote.obj `if test -f '../remote.cpp'; then $(CYGPATH_W) '../remote.cpp'; else $(CYGPATH_W) '$(srcdir)/../remote.cpp'; fi`

scanline.o: ../scanline.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT scanline.o -MD -MP -MF "$(DEPDIR)/scanline.Tpo" \
	  -c -o scanline.o `test -f '../scanline.cpp' || echo '$(srcdir)/'`../scanline.cpp; \
	then mv -f "$(DEPDIR)/scanline.Tpo" "$(DEPDIR)/scanline.Po"; \
	else rm -f "$(DEPDIR)/scanline.Tpo"; exit 1; \
	fi
#	source='../scanline.cpp' object='scanline.o' libtool=no \
#	depfile='$(DEPDIR)/scanline.Po' tmpdepfile='$(DEPDIR)/scanline.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o scanline.o `test -f '../scanline.cpp' || echo '$(srcdir)/'`../scanline.cpp

scanline.obj: ../scanline.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT scanline.obj -MD -MP -MF "$(DEPDIR)/scanline.Tpo" \
	  -c -o scanline.obj `if test -f '../scanline.cpp'; then $(CYGPATH_W) '../scanline.cpp'; else $(CYGPATH_W) '$(srcdir)/../scanline.cpp'; fi`; \
	then mv -f "$(DEPDIR)/scanline.Tpo" "$(DEPDIR)/scanline.Po"; \
	else rm -f "$(DEPDIR)/scanline.Tpo"; exit 1; \
	fi
#	source='../scanline.cpp' object='scanline.obj' libtool=no \
#	depfile='$(DEPDIR)/scanline.Po' tmpdepfile='$(DEPDIR)/scanline.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o scanline.obj `if test -f '../scanline.cpp'; then $(CYGPATH_W) '../scanline.cpp'; else $(CYGPATH_W) '$(srcdir)/../scanline.cpp'; fi`

simple2x.o: ../simple2x.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT simple2x.o -MD -MP -MF "$(DEPDIR)/simple2x.Tpo" \
	  -c -o simple2x.o `test -f '../simple2x.cpp' || echo '$(srcdir)/'`../simple2x.cpp; \
	then mv -f "$(DEPDIR)/simple2x.Tpo" "$(DEPDIR)/simple2x.Po"; \
	else rm -f "$(DEPDIR)/simple2x.Tpo"; exit 1; \
	fi
#	source='../simple2x.cpp' object='simple2x.o' libtool=no \
#	depfile='$(DEPDIR)/simple2x.Po' tmpdepfile='$(DEPDIR)/simple2x.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o simple2x.o `test -f '../simple2x.cpp' || echo '$(srcdir)/'`../simple2x.cpp

simple2x.obj: ../simple2x.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT simple2x.obj -MD -MP -MF "$(DEPDIR)/simple2x.Tpo" \
	  -c -o simple2x.obj `if test -f '../simple2x.cpp'; then $(CYGPATH_W) '../simple2x.cpp'; else $(CYGPATH_W) '$(srcdir)/../simple2x.cpp'; fi`; \
	then mv -f "$(DEPDIR)/simple2x.Tpo" "$(DEPDIR)/simple2x.Po"; \
	else rm -f "$(DEPDIR)/simple2x.Tpo"; exit 1; \
	fi
#	source='../simple2x.cpp' object='simple2x.obj' libtool=no \
#	depfile='$(DEPDIR)/simple2x.Po' tmpdepfile='$(DEPDIR)/simple2x.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o simple2x.obj `if test -f '../simple2x.cpp'; then $(CYGPATH_W) '../simple2x.cpp'; else $(CYGPATH_W) '$(srcdir)/../simple2x.cpp'; fi`

unzip.o: ../unzip.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT unzip.o -MD -MP -MF "$(DEPDIR)/unzip.Tpo" \
	  -c -o unzip.o `test -f '../unzip.cpp' || echo '$(srcdir)/'`../unzip.cpp; \
	then mv -f "$(DEPDIR)/unzip.Tpo" "$(DEPDIR)/unzip.Po"; \
	else rm -f "$(DEPDIR)/unzip.Tpo"; exit 1; \
	fi
#	source='../unzip.cpp' object='unzip.o' libtool=no \
#	depfile='$(DEPDIR)/unzip.Po' tmpdepfile='$(DEPDIR)/unzip.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o unzip.o `test -f '../unzip.cpp' || echo '$(srcdir)/'`../unzip.cpp

unzip.obj: ../unzip.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT unzip.obj -MD -MP -MF "$(DEPDIR)/unzip.Tpo" \
	  -c -o unzip.obj `if test -f '../unzip.cpp'; then $(CYGPATH_W) '../unzip.cpp'; else $(CYGPATH_W) '$(srcdir)/../unzip.cpp'; fi`; \
	then mv -f "$(DEPDIR)/unzip.Tpo" "$(DEPDIR)/unzip.Po"; \
	else rm -f "$(DEPDIR)/unzip.Tpo"; exit 1; \
	fi
#	source='../unzip.cpp' object='unzip.obj' libtool=no \
#	depfile='$(DEPDIR)/unzip.Po' tmpdepfile='$(DEPDIR)/unzip.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o unzip.obj `if test -f '../unzip.cpp'; then $(CYGPATH_W) '../unzip.cpp'; else $(CYGPATH_W) '$(srcdir)/../unzip.cpp'; fi`

bilinear.o: ../bilinear.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bilinear.o -MD -MP -MF "$(DEPDIR)/bilinear.Tpo" \
	  -c -o bilinear.o `test -f '../bilinear.cpp' || echo '$(srcdir)/'`../bilinear.cpp; \
	then mv -f "$(DEPDIR)/bilinear.Tpo" "$(DEPDIR)/bilinear.Po"; \
	else rm -f "$(DEPDIR)/bilinear.Tpo"; exit 1; \
	fi
#	source='../bilinear.cpp' object='bilinear.o' libtool=no \
#	depfile='$(DEPDIR)/bilinear.Po' tmpdepfile='$(DEPDIR)/bilinear.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bilinear.o `test -f '../bilinear.cpp' || echo '$(srcdir)/'`../bilinear.cpp

bilinear.obj: ../bilinear.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bilinear.obj -MD -MP -MF "$(DEPDIR)/bilinear.Tpo" \
	  -c -o bilinear.obj `if test -f '../bilinear.cpp'; then $(CYGPATH_W) '../bilinear.cpp'; else $(CYGPATH_W) '$(srcdir)/../bilinear.cpp'; fi`; \
	then mv -f "$(DEPDIR)/bilinear.Tpo" "$(DEPDIR)/bilinear.Po"; \
	else rm -f "$(DEPDIR)/bilinear.Tpo"; exit 1; \
	fi
#	source='../bilinear.cpp' object='bilinear.obj' libtool=no \
#	depfile='$(DEPDIR)/bilinear.Po' tmpdepfile='$(DEPDIR)/bilinear.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bilinear.obj `if test -f '../bilinear.cpp'; then $(CYGPATH_W) '../bilinear.cpp'; else $(CYGPATH_W) '$(srcdir)/../bilinear.cpp'; fi`

interframe.o: ../interframe.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT interframe.o -MD -MP -MF "$(DEPDIR)/interframe.Tpo" \
	  -c -o interframe.o `test -f '../interframe.cpp' || echo '$(srcdir)/'`../interframe.cpp; \
	then mv -f "$(DEPDIR)/interframe.Tpo" "$(DEPDIR)/interframe.Po"; \
	else rm -f "$(DEPDIR)/interframe.Tpo"; exit 1; \
	fi
#	source='../interframe.cpp' object='interframe.o' libtool=no \
#	depfile='$(DEPDIR)/interframe.Po' tmpdepfile='$(DEPDIR)/interframe.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o interframe.o `test -f '../interframe.cpp' || echo '$(srcdir)/'`../interframe.cpp

interframe.obj: ../interframe.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT interframe.obj -MD -MP -MF "$(DEPDIR)/interframe.Tpo" \
	  -c -o interframe.obj `if test -f '../interframe.cpp'; then $(CYGPATH_W) '../interframe.cpp'; else $(CYGPATH_W) '$(srcdir)/../interframe.cpp'; fi`; \
	then mv -f "$(DEPDIR)/interframe.Tpo" "$(DEPDIR)/interframe.Po"; \
	else rm -f "$(DEPDIR)/interframe.Tpo"; exit 1; \
	fi
#	source='../interframe.cpp' object='interframe.obj' libtool=no \
#	depfile='$(DEPDIR)/interframe.Po' tmpdepfile='$(DEPDIR)/interframe.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o interframe.obj `if test -f '../interframe.cpp'; then $(CYGPATH_W) '../interframe.cpp'; else $(CYGPATH_W) '$(srcdir)/../interframe.cpp'; fi`
uninstall-info-am:

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ../..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(bindir)
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-noinstPROGRAMS \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-noinstPROGRAMS ctags distclean \
	distclean-compile distclean-generic distclean-tags distdir dvi \
	dvi-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-exec install-exec-am \
	install-info install-info-am install-man install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
